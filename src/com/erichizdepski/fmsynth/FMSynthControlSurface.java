/*
 * FMInstrument.java
 *
 * Created on June 14, 2005, 8:50 PM
 */

package com.erichizdepski.fmsynth;
import javax.swing.event.*;
import javax.swing.*;
/**
 * A Java GUI wrapped around a synthesis engine for playback control using a
 * mouse. This uses RealTimeFMSynth since FMMidiInstrument requires note on/off
 * messages for controlling playback.
 * @author  Erich Izdepski
 */
public class FMSynthControlSurface extends javax.swing.JFrame implements ChangeListener
{
    private Player player = null;
    private RealTimeFMSynth mysynth = null;
    
    /** Creates new form FMInstrument */
    public FMSynthControlSurface()
    {
        initComponents();
        mysynth = new RealTimeFMSynth(FMSynthPatch.PATCH);         
        player = new Player(mysynth.getAudioStream(), mysynth.BUFFER_SIZE);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        carrierFreq = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        modFreq = new javax.swing.JSlider();
        modIndex = new javax.swing.JSlider();
        modIndexMax = new javax.swing.JSlider();
        amplitude = new javax.swing.JSlider();
        cf = new javax.swing.JTextField();
        mf = new javax.swing.JTextField();
        mi = new javax.swing.JTextField();
        mim = new javax.swing.JTextField();
        amp = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jLabel1.setText("Carrier Freq");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        carrierFreq.setMaximum(3000);
        carrierFreq.setValue(1000);
        carrierFreq.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                carrierFreqStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(carrierFreq, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("MS Sans Serif", 0, 24));
        jLabel2.setText("FM Synth");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(26, 70, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("Mod Freq");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 20, 0, 0);
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel4.setText("Mod Index");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 20, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        jLabel5.setText("Mod Index Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 20, 0, 0);
        getContentPane().add(jLabel5, gridBagConstraints);

        jLabel6.setText("Amplitude");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 20, 0, 0);
        getContentPane().add(jLabel6, gridBagConstraints);

        modFreq.setMaximum(1000);
        modFreq.setValue(100);
        modFreq.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                modFreqStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 10, 0, 0);
        getContentPane().add(modFreq, gridBagConstraints);

        modIndex.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                modIndexStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 10, 0, 0);
        getContentPane().add(modIndex, gridBagConstraints);

        modIndexMax.setValue(1);
        modIndexMax.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                modIndexMaxStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 10, 0, 0);
        getContentPane().add(modIndexMax, gridBagConstraints);

        amplitude.setMaximum(200);
        amplitude.setValue(100);
        amplitude.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                amplitudeStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 164;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 10, 0, 0);
        getContentPane().add(amplitude, gridBagConstraints);

        cf.setEditable(false);
        cf.setText("1000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        getContentPane().add(cf, gridBagConstraints);

        mf.setEditable(false);
        mf.setText("100");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 20, 0, 0);
        getContentPane().add(mf, gridBagConstraints);

        mi.setEditable(false);
        mi.setText("50");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 20, 0, 0);
        getContentPane().add(mi, gridBagConstraints);

        mim.setEditable(false);
        mim.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 20, 0, 0);
        getContentPane().add(mim, gridBagConstraints);

        amp.setEditable(false);
        amp.setText("100");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 20, 0, 0);
        getContentPane().add(amp, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 49);
        getContentPane().add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 34, 0);
        getContentPane().add(jLabel8, gridBagConstraints);

        pack();
    }//GEN-END:initComponents

    private void amplitudeStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_amplitudeStateChanged
    {//GEN-HEADEREND:event_amplitudeStateChanged
        // TODO add your handling code here:
        stateChanged(evt);
    }//GEN-LAST:event_amplitudeStateChanged

    private void modIndexMaxStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_modIndexMaxStateChanged
    {//GEN-HEADEREND:event_modIndexMaxStateChanged
        // TODO add your handling code here:
        stateChanged(evt);
    }//GEN-LAST:event_modIndexMaxStateChanged

    private void modIndexStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_modIndexStateChanged
    {//GEN-HEADEREND:event_modIndexStateChanged
        // TODO add your handling code here:
        stateChanged(evt);
    }//GEN-LAST:event_modIndexStateChanged

    private void modFreqStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_modFreqStateChanged
    {//GEN-HEADEREND:event_modFreqStateChanged
        // TODO add your handling code here:
        stateChanged(evt);
    }//GEN-LAST:event_modFreqStateChanged

    private void carrierFreqStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_carrierFreqStateChanged
    {//GEN-HEADEREND:event_carrierFreqStateChanged
        // TODO add your handling code here:
        stateChanged(evt);
    }//GEN-LAST:event_carrierFreqStateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        final FMSynthControlSurface instr = new FMSynthControlSurface();
        
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                instr.setVisible(true);
                //use two threads- one for generating audio, one for playing back
                instr.getMysynth().setAlive(true);
                instr.getMysynth().start();
                instr.getPlayer().setAlive(true);
                instr.getPlayer().start();
            }
        });
        
        
    }

    public RealTimeFMSynth getMysynth()
    {
        return mysynth;
    }

    public Player getPlayer()
    {
        return player;
    }

    public void stateChanged(ChangeEvent evt)
    {
        JSlider obj = (JSlider)evt.getSource();
        RealTimeFMSynth synth = getMysynth();
        double ampl = 0;
        double modI = 0;
        
        if (obj == carrierFreq)
        {
            //change freq of the synth
            synth.setCarrierFreq(obj.getValue());
            cf.setText(Integer.toString(obj.getValue()));
        }
        else if (obj == amplitude)
        {
            ampl = (double)obj.getValue()/100;
            synth.setAmplitude(ampl);
            amp.setText(Double.toString(ampl));
        }
        else if (obj == modFreq)
        {
            synth.setModFreq(obj.getValue());
            mf.setText(Integer.toString(obj.getValue()));
        }
        else if (obj == modIndex)
        {
            modI = (double)obj.getValue()/100;
            synth.setModIndex(modI);
            mi.setText(Double.toString(modI));
        }
        else if (obj == modIndexMax)
        {
            synth.setModIndexMax(obj.getValue());
            mim.setText(Integer.toString(obj.getValue()));
        }

    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amp;
    private javax.swing.JSlider amplitude;
    private javax.swing.JSlider carrierFreq;
    private javax.swing.JTextField cf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField mf;
    private javax.swing.JTextField mi;
    private javax.swing.JTextField mim;
    private javax.swing.JSlider modFreq;
    private javax.swing.JSlider modIndex;
    private javax.swing.JSlider modIndexMax;
    // End of variables declaration//GEN-END:variables
    
}
