/*
 * SynthPlayer.java. This variant of FMInstrument keeps the carrier frequency
 * and the modulation frequency at a fixed, user selectable ratio. The result is
 * that 'better' (more musical) sounds are easier to obtain. 
 *
 * Created on June 21, 2005, 6:40 AM
 */

package com.erichizdepski.fmsynth;
import javax.swing.event.*;
import javax.swing.*;
import java.io.*;
import java.util.*;

/**
 *
 * @author  Erich Izdepski
 */
public class MainControl extends javax.swing.JFrame implements ChangeListener, Constants
{
    private Player player = null;
    private RealTimeFMSynth synth = null;
    private double freqRatio = 1;
    private boolean stretchFM_ = false;
    //midi note to freq table
    static double[] freqTable = new double[128];
    //C is midi note 0
    static String[] notes = new String[]{"C", "C#", "D", "D#", "E", "F", "F#", 
            "G", "G#", "A", "A#", "B"};
    
    LFO modlfo = new LFO(NOISE, 0, 0);
    FxWrapper fx = new FxWrapper(0, 0);
    FMSynthPatch patch = new FMSynthPatch(1, .66);
    
    //properties file for storing patch names
    private static String PROPS = "synthprops";
    private static String PATCHES = "synthpatches.properties";
    private static String FORMAT = "comma-delimited: freqRatioCB, modIndex, modIndexMax, amplitude,"
              + "mLFORate, mLFODepth, lfoType, fxName, fxAmount";
    File storageFolder = null;
    File patchStore = null;
    Properties patches = null;
    
    //the favorites backing store
    DefaultListModel model = null;    
    

    
    /** Creates new SynthPlayer */
    public MainControl()
    {
        initComponents();
        initFreqTable();       
        initPatchList();
        
        patch.setModlfo(modlfo);
        patch.setFx(fx);
        synth = new RealTimeFMSynth(patch);         
        player = new Player(synth.getAudioStream(), RealTimeFMSynth.BUFFER_SIZE);
        
        //use two threads- one for generating audio, one for playing back
        synth.setAlive(true);
        synth.start();
        player.setAlive(true);
        player.start();
    }
    
    
    private void shutdown()
    {
        savePatchesForShutdown();
        synth.setAlive(false);
        player.setAlive(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        lfoAssignGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        modIndex = new javax.swing.JSlider();
        modIndexMax = new javax.swing.JSlider();
        amplitude = new javax.swing.JSlider();
        cf = new javax.swing.JTextField();
        mi = new javax.swing.JTextField();
        mim = new javax.swing.JTextField();
        amp = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ratio = new javax.swing.JLabel();
        freqRatioCB = new javax.swing.JComboBox();
        canvas1 = new java.awt.Canvas();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        mLFOdepth = new javax.swing.JTextField();
        mLFOrate = new javax.swing.JTextField();
        lfoType = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        fxAmount = new javax.swing.JTextField();
        patchList = new javax.swing.JList();
        fxName = new javax.swing.JComboBox();
        load = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        getContentPane().setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FM Synth");
        jLabel1.setText("Carrier Freq/Note");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 430, 130, 15);

        jLabel4.setText("Mod Index");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 100, 60, 15);

        jLabel5.setText("Mod Index Max");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(20, 140, 80, 15);

        jLabel6.setText("Amplitude");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(20, 180, 60, 15);

        modIndex.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                modIndexStateChanged(evt);
            }
        });

        getContentPane().add(modIndex);
        modIndex.setBounds(110, 100, 320, 24);

        modIndexMax.setValue(100);
        modIndexMax.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                modIndexMaxStateChanged(evt);
            }
        });

        getContentPane().add(modIndexMax);
        modIndexMax.setBounds(110, 140, 320, 24);

        amplitude.setMaximum(314);
        amplitude.setValue(157);
        amplitude.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                amplitudeStateChanged(evt);
            }
        });

        getContentPane().add(amplitude);
        amplitude.setBounds(110, 180, 320, 24);

        cf.setEditable(false);
        cf.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cfActionPerformed(evt);
            }
        });

        getContentPane().add(cf);
        cf.setBounds(160, 430, 120, 20);

        mi.setEditable(false);
        mi.setText("50");
        getContentPane().add(mi);
        mi.setBounds(470, 100, 50, 20);

        mim.setEditable(false);
        mim.setText("100");
        getContentPane().add(mim);
        mim.setBounds(470, 140, 50, 20);

        amp.setEditable(false);
        amp.setText(Double.toString((double)amplitude.getValue()/100));
        getContentPane().add(amp);
        amp.setBounds(470, 180, 50, 20);

        getContentPane().add(jLabel7);
        jLabel7.setBounds(390, 20, 0, 0);

        getContentPane().add(jLabel8);
        jLabel8.setBounds(180, 270, 0, 0);

        ratio.setText("Freq Ratio");
        getContentPane().add(ratio);
        ratio.setBounds(20, 60, 60, 15);

        freqRatioCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "4", "3", "2.89", "2.5", "2", "1.5", "1", ".707", "0.5", "0.33", "0.25", "0.2", "0.167", "0.1428", "0.125", "0.1111", "0.1", "0.05" }));
        freqRatioCB.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                freqRatioCBItemStateChanged(evt);
            }
        });

        getContentPane().add(freqRatioCB);
        freqRatioCB.setBounds(120, 60, 70, 19);

        canvas1.setBackground(new java.awt.Color(171, 38, 38));
        canvas1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseMoved(java.awt.event.MouseEvent evt)
            {
                canvas1MouseMoved(evt);
            }
        });

        getContentPane().add(canvas1);
        canvas1.setBounds(20, 460, 640, 50);

        jLabel2.setText("Mod LFO");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 220, 70, 15);

        jLabel3.setText("type");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(50, 240, 50, 15);

        jLabel9.setText("rate");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(50, 270, 50, 15);

        jLabel10.setText("depth");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(50, 300, 50, 15);

        mLFOdepth.setText("0");
        mLFOdepth.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mLFOdepthActionPerformed(evt);
            }
        });

        getContentPane().add(mLFOdepth);
        mLFOdepth.setBounds(120, 300, 30, 20);

        mLFOrate.setText("0");
        mLFOrate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mLFOrateActionPerformed(evt);
            }
        });

        getContentPane().add(mLFOrate);
        mLFOrate.setBounds(120, 270, 30, 20);

        lfoType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Noise", "Saw", "Sine", "Square", "Triangle" }));
        lfoType.setToolTipText("select the LFO waveform");
        lfoType.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                lfoTypeItemStateChanged(evt);
            }
        });

        getContentPane().add(lfoType);
        lfoType.setBounds(120, 240, 70, 19);

        jLabel11.setText("(hit return to trigger LFO changes)");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(40, 330, 250, 15);

        jLabel12.setText("Fx");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(300, 240, 30, 15);

        jLabel13.setText("Fx amount");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(300, 270, 70, 15);

        fxAmount.setText("0");
        fxAmount.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fxAmountActionPerformed(evt);
            }
        });

        getContentPane().add(fxAmount);
        fxAmount.setBounds(380, 270, 50, 20);

        patchList.setPreferredSize(new java.awt.Dimension(150, 400));
        getContentPane().add(patchList);
        patchList.setBounds(530, 10, 150, 320);

        fxName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cheb2", "Mobius", "Shaper", "Shaper2", "Res filter" }));
        fxName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fxNameActionPerformed(evt);
            }
        });

        getContentPane().add(fxName);
        fxName.setBounds(380, 240, 130, 19);

        load.setText("load");
        load.setToolTipText("load a saved patch from list");
        load.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadActionPerformed(evt);
            }
        });

        getContentPane().add(load);
        load.setBounds(610, 340, 71, 23);

        save.setText("save");
        save.setToolTipText("save the current patch");
        save.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveActionPerformed(evt);
            }
        });

        getContentPane().add(save);
        save.setBounds(530, 340, 71, 23);

        lfoAssignGroup.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("mod Index");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                modIndexButton(evt);
            }
        });

        getContentPane().add(jRadioButton1);
        jRadioButton1.setBounds(20, 350, 150, 23);

        lfoAssignGroup.add(jRadioButton2);
        jRadioButton2.setText("pitch");
        jRadioButton2.setActionCommand("jRadioButton2");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                pitchButton(evt);
            }
        });

        getContentPane().add(jRadioButton2);
        jRadioButton2.setBounds(20, 370, 140, 23);

        lfoAssignGroup.add(jRadioButton3);
        jRadioButton3.setText("amplitude");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                amplitudeButton(evt);
            }
        });

        getContentPane().add(jRadioButton3);
        jRadioButton3.setBounds(20, 390, 150, 23);

        jCheckBox1.setText("stretch");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCheckBox1ActionPerformed(evt);
            }
        });

        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(220, 60, 83, 23);

        jMenuBar1.setOpaque(false);
        jMenu1.setText("Menu");
        jMenuItem1.setText("exit");
        jMenuItem1.setName("exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jCheckBox1ActionPerformed
    {//GEN-HEADEREND:event_jCheckBox1ActionPerformed
// TODO add your handling code here:
        //indicates to add 5% to the value of the modulation frequency
        //test value- if selected, add 5% to FM
        if (((JCheckBox)evt.getSource()).isSelected())
        {
            stretchFM_ = true;
        }
        else
        {
            stretchFM_ = false;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void amplitudeButton(java.awt.event.ActionEvent evt)//GEN-FIRST:event_amplitudeButton
    {//GEN-HEADEREND:event_amplitudeButton
// TODO add your handling code here:
        synth.setAssignLFO(AndroidRealTimeFMSynth.LFO_TO_AMPLITUDE);
    }//GEN-LAST:event_amplitudeButton

    private void pitchButton(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pitchButton
    {//GEN-HEADEREND:event_pitchButton
// TODO add your handling code here:
        synth.setAssignLFO(AndroidRealTimeFMSynth.LFO_TO_PITCH);
    }//GEN-LAST:event_pitchButton

    private void modIndexButton(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modIndexButton
    {//GEN-HEADEREND:event_modIndexButton
// TODO add your handling code here:
        synth.setAssignLFO(AndroidRealTimeFMSynth.LFO_TO_MODINDEX);
    }//GEN-LAST:event_modIndexButton

    private void loadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadActionPerformed
    {//GEN-HEADEREND:event_loadActionPerformed
// TODO add your handling code here:
        //load the patch selected in the patchlist
        String patchName = (String)patchList.getSelectedValue();
        load(patchName);
    }//GEN-LAST:event_loadActionPerformed

    private void cfActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cfActionPerformed
    {//GEN-HEADEREND:event_cfActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_cfActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveActionPerformed
    {//GEN-HEADEREND:event_saveActionPerformed
// TODO add your handling code here:
        //launch the dialog to capture the patch name
        String patchName = JOptionPane.showInputDialog(this, "enter the patch name");
        if (patchName == null)
        {
            //user cancelled
        }
        else
        {           
            save(patchName);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void fxNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fxNameActionPerformed
    {//GEN-HEADEREND:event_fxNameActionPerformed
// TODO add your handling code here:
        fx.setName(((JComboBox)evt.getSource()).getSelectedIndex());
    }//GEN-LAST:event_fxNameActionPerformed

    private void fxAmountActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fxAmountActionPerformed
    {//GEN-HEADEREND:event_fxAmountActionPerformed
// TODO add your handling code here:
        fx.setAmt((double)Integer.parseInt(((JTextField)evt.getSource()).getText())/100);
    }//GEN-LAST:event_fxAmountActionPerformed

    private void mLFOrateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mLFOrateActionPerformed
    {//GEN-HEADEREND:event_mLFOrateActionPerformed
// TODO add your handling code here:
        modlfo.setRate(Integer.parseInt(((JTextField)evt.getSource()).getText()));
    }//GEN-LAST:event_mLFOrateActionPerformed

    private void mLFOdepthActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mLFOdepthActionPerformed
    {//GEN-HEADEREND:event_mLFOdepthActionPerformed
// TODO add your handling code here:
        modlfo.setDepth(Integer.parseInt(((JTextField)evt.getSource()).getText()));
    }//GEN-LAST:event_mLFOdepthActionPerformed

    private void lfoTypeItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_lfoTypeItemStateChanged
    {//GEN-HEADEREND:event_lfoTypeItemStateChanged
// TODO add your handling code here:
        //change modlfo waveform
        int index = ((JComboBox)evt.getSource()).getSelectedIndex();
        modlfo.setType(index);
    }//GEN-LAST:event_lfoTypeItemStateChanged

    private void canvas1MouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_canvas1MouseMoved
    {//GEN-HEADEREND:event_canvas1MouseMoved
// TODO add your handling code here:
        //convert mouse x position in the canvas to a frequency value for playback
        setFreq(evt.getX());
        
    }//GEN-LAST:event_canvas1MouseMoved

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        shutdown();
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void freqRatioCBItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_freqRatioCBItemStateChanged
    {//GEN-HEADEREND:event_freqRatioCBItemStateChanged
        // TODO add your handling code here:
        String value = (String)(evt.getItemSelectable().getSelectedObjects()[0]);
        
        freqRatio = Double.parseDouble(value);
    }//GEN-LAST:event_freqRatioCBItemStateChanged

    private void amplitudeStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_amplitudeStateChanged
    {//GEN-HEADEREND:event_amplitudeStateChanged
        // TODO add your handling code here:
        stateChanged(evt);
    }//GEN-LAST:event_amplitudeStateChanged

    private void modIndexMaxStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_modIndexMaxStateChanged
    {//GEN-HEADEREND:event_modIndexMaxStateChanged
        // TODO add your handling code here:
        stateChanged(evt);
    }//GEN-LAST:event_modIndexMaxStateChanged

    private void modIndexStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_modIndexStateChanged
    {//GEN-HEADEREND:event_modIndexStateChanged
        // TODO add your handling code here:
        stateChanged(evt);
    }//GEN-LAST:event_modIndexStateChanged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        MainControl instr = new MainControl();
        instr.setSize(800, 570);
        instr.setVisible(true);
        instr.repaint();
   
    }

    public RealTimeFMSynth getMysynth()
    {
        return synth;
    }

    public Player getPlayer()
    {
        return player;
    }

    
    public void setFreq(int x)
    {
        double freq = freqTable[x / 5];
        //change freq of the synth
        synth.setCarrierFreq(freq);
        String freqS = Double.toString(Math.floor(freq));
        String note = getNote(freq);
        cf.setText(freqS + " / " + note);
        
        //set this too since linked- include stretch, if indicated in GUI
        
        double fmod = freq * freqRatio;
        if (stretchFM_)
        {
            fmod = fmod * 1.05;
        }
        
        synth.setModFreq(fmod);
    }
    
    
    public void stateChanged(ChangeEvent evt)
    {
        JSlider obj = (JSlider)evt.getSource();
        double ampl = 0;
        double modI = 0;

        if (obj == amplitude)
        {
            ampl = (double)obj.getValue()/100;
            synth.setAmplitude(ampl);
            amp.setText(Double.toString(ampl));
            debug("amplitude= " + ampl);
        }
        else if (obj == modIndex)
        {
            //fraction of mod index max
            modI = (double)(obj.getValue());// (double)(obj.getValue() * modIndexMax.getValue())/100;
            synth.setModIndex(modI);
            mi.setText(Double.toString(modI));
           
        }
        /*
        else if (obj == modIndexMax)
        {
            //output range for arc cosine is 0 to pi, input should be -1 to 1
            synth.setModIndexMax((double)obj.getValue());
            mim.setText(Double.toString((double)obj.getValue()));
             //also change modIndex
            modI = (double)(modIndex.getValue() * obj.getValue())/100;
            synth.setModIndex(modI);
            mi.setText(Double.toString(modI));
            debug("mod index max= " + synth.getModIndexMax());
        }
        */

    }

    
    private void initFreqTable()
    {
        for (int i = 0; i < 128; i++)
        {
            freqTable[i] = AHz * Math.pow(2, ((double)(i - A_MIDI)/12));
            
        }
    }
    
    /*
     * Get the note for the given frequency.
     */
    private String getNote(double freq)
    {
        //find the midi note value
        int midiNote = 0;
        
        for (int i = 0; i < 128; i++)
        {
            if (freq == freqTable[i])
            {
                //found it
                midiNote = i;
                break;
            }
        }
        
        //find the octave
        int octave = (int)midiNote/12;
        //find the note
        String note = notes[midiNote % 12];
        
        return note + Integer.toString(octave);
    }
    
    /*
     * Add a patch and its settings to the properties file and the list data model
     */
    private void save(String name)
    {
        //create the value for the patch
        String value = getFreqRatioCB() + "," +
                        getModIndex() + "," +
                        getModIndexMax() + "," +
                        getAmplitude() + "," +
                        getMLFOrate() + "," +
                        getMLFOdepth() + "," +
                        getLfoType() + "," +
                        getFxName() + "," +
                        getFxAmount();
        //add the patch to the properties object
        patches.setProperty(name, value);
        System.out.println("added patch" + name + "=" + value);
        
        //update the patchList data model
        model.addElement(name);
    }
    
    /*
     * Save all patches (in the properties object to the correct file.
     */
    private void savePatchesForShutdown()
    {
        OutputStream output = null;
        try
        {
            //plan is to over-write the file on shutdown
            if (patchStore.exists())
            {
                patchStore.delete();
            }
            
            //create the file
            patchStore = new File(storageFolder + File.separator + PATCHES);
            
            //save the patches
            output = new FileOutputStream(patchStore);
            patches.store(output, FORMAT);
            
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        finally
        {
            try
            {
                if (output != null) output.close();
            }
            catch (IOException e)
            {
                //snuff
            }
        }
        
    }
    
    /*
     * Loads a patch as the current synth settings.
     */
    private void load(String patchToLoad)
    {
        //look up the patch name in the properties object and set up the GUI
        String settings = patches.getProperty(patchToLoad);
        
        //tokenize the value (comma delimited)
        
        //"comma-delimited: freqRatioCB, modIndex, modIndexMax, amplitude,"
        //      + "mLFORate, mLFODepth, lfoType, fxName, fxAmount";
        
        //FIXME LFO changes not taking effect following load. also, mod index and MIM
        //are not getting reset during a load. May just be the label box.
        
        StringTokenizer tok = new StringTokenizer(settings, ",");
        //ensure we are using comma delimter for tokenizing
        String temp = null;
        temp = tok.nextToken();
        setFreqRatioCB(temp);
        temp = tok.nextToken();
        setModIndex(temp);
        temp = tok.nextToken();
        setModIndexMax(temp);
        temp = tok.nextToken();
        setAmplitude(temp);
        temp = tok.nextToken();
        setMLFOrate(temp);
        temp = tok.nextToken();
        setMLFOdepth(temp);
        temp = tok.nextToken();
        setLfoType(temp);
        temp = tok.nextToken();
        setFxName(temp);
        temp = tok.nextToken();
        setFxAmount(temp);
        
    }
    
    /*
     * Load the patchList with the properties data.
     */
    private void initPatchList()
    {
        //load stored patches or initialize if first time
        patches = new Properties();
        storageFolder = new File(System.getProperty("user.home") + File.separator + PROPS);
        storageFolder.mkdir();
        if (storageFolder.exists())
        {
            System.out.println("created " + storageFolder.getName());
        }
        
        patchStore = new File(storageFolder + File.separator + PATCHES);
                
        if (patchStore.exists())
        {
            InputStream input = null;
            
            try
            {
                
                input = new FileInputStream(patchStore);
                //load a properties object from the existing file
                patches.load(input);
                System.out.println("loaded patches from " + patchStore.getCanonicalPath());
                
                //create the patchList data model and set it
                model = new DefaultListModel();
                Enumeration e = patches.propertyNames();

                while (e.hasMoreElements())
                {
                    model.addElement((String)e.nextElement());
                }
                
                patchList.setModel(model);
            }
            catch(IOException e)
            {
                e.printStackTrace();
            }
            finally
            {
                try
                {
                    if (input != null) input.close();
                }
                catch(IOException e)
                {
                    //snuff
                }
                
            }
        }
        else
        {
            //create the properties object as empty; write the file later
            patches = new Properties();
        }
    }

    
    /*
     * Get/Set methods for the GUI component VALUES.
     */
    
    private int getAmplitude()
    {
        return amplitude.getValue();
    }

    private void setAmplitude(String ampl)
    {
        this.amplitude.setValue(Integer.parseInt(ampl));
        debug("amplitude=" + ampl);
    }

    private String getFreqRatioCB()
    {
        return Integer.toString(freqRatioCB.getSelectedIndex());
    }

    private void setFreqRatioCB(String index)
    {
        freqRatioCB.setSelectedIndex(Integer.parseInt(index));
        debug("freq ratio index=" + index);
    }

    private String getFxAmount()
    {
        return fxAmount.getText();
    }

    private void setFxAmount(String amt)
    {
        fxAmount.setText(amt);
        debug("fx amount= " + amt);
    }

    private String getFxName()
    {
        return Integer.toString(fxName.getSelectedIndex());
    }

    private void setFxName(String index)
    {
        fxName.setSelectedIndex(Integer.parseInt(index));
        debug("fx type= " +index );
    }

    private String getLfoType()
    {
        return Integer.toString(lfoType.getSelectedIndex());
    }

    private void setLfoType(String index)
    {
        lfoType.setSelectedIndex(Integer.parseInt(index));
        debug(" lfo type=" + index);
    }

    private String getMLFOdepth()
    {
        return mLFOdepth.getText();
    }

    private void setMLFOdepth(String depth)
    {
        mLFOdepth.setText(depth);
        debug("lfo depth=" + depth);
    }

    private String getMLFOrate()
    {
        return mLFOrate.getText();
    }

    private void setMLFOrate(String rate)
    {
        mLFOrate.setText(rate);
        debug("lfo rate=" + rate);
    }

    private String getModIndex()
    {
        return Double.toString(synth.getModIndex());
    }

    private void setModIndex(String mi)
    {
        synth.setModIndex(Double.parseDouble(mi));
        debug("mod index=" + mi);
    }

    private String getModIndexMax()
    {
        return Double.toString(synth.getModIndexMax());
    }

    private void setModIndexMax(String mim)
    {
        synth.setModIndexMax(Double.parseDouble(mim));
        debug ("mod index max= " + mim);
    }
    
    private void debug(String msg)
    {
       System.out.println(msg);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amp;
    private javax.swing.JSlider amplitude;
    private java.awt.Canvas canvas1;
    private javax.swing.JTextField cf;
    private javax.swing.JComboBox freqRatioCB;
    private javax.swing.JTextField fxAmount;
    private javax.swing.JComboBox fxName;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.ButtonGroup lfoAssignGroup;
    private javax.swing.JComboBox lfoType;
    private javax.swing.JButton load;
    private javax.swing.JTextField mLFOdepth;
    private javax.swing.JTextField mLFOrate;
    private javax.swing.JTextField mi;
    private javax.swing.JTextField mim;
    private javax.swing.JSlider modIndex;
    private javax.swing.JSlider modIndexMax;
    private javax.swing.JList patchList;
    private javax.swing.JLabel ratio;
    private javax.swing.JButton save;
    // End of variables declaration//GEN-END:variables
    
}
